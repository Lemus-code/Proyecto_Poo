/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.hgrgroup;
import Clases.*;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
/**
 *
 * @author Familia
 */
public class ModificacionesLandingPage extends javax.swing.JFrame {
    private SharedData shareData;
    private DefaultTableModel modelo;
    private String cliente;
    /**
     * Creates new form CasasLandingPage
     */
    public ModificacionesLandingPage(SharedData data, String nombreCliente) {
        initComponents();
        this.shareData = data;
        this.modelo = new DefaultTableModel();
        this.cliente = nombreCliente;
        transparencia(btnRegresar);
        this.setSize(1520, 480);
        
        
        //Columnas
        modelo.addColumn("Nombre");
        modelo.addColumn("Descripción");
        modelo.addColumn("Estado");
        modelo.addColumn("Fecha Inicio");
        modelo.addColumn("Fecha Entrega");
        modelo.addColumn("Costo Adicional");
        
         

        jTablaModificaciones.setModel(modelo);// Asigna el renderizador personalizado a la columna de "Descripción"
        
        
        mostrarModificaciones();
        //Desactivar edición
        desactivarCeldas();
        // Desactiva el ajuste automático inicial
        jTablaModificaciones.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        // Ajusta el ancho de las columnas al contenido
        for (int column = 0; column < jTablaModificaciones.getColumnCount(); column++) {
            TableColumn tableColumn = jTablaModificaciones.getColumnModel().getColumn(column);
            int preferredWidth = tableColumn.getMinWidth(); // Ancho mínimo

            for (int row = 0; row < jTablaModificaciones.getRowCount(); row++) {
                TableCellRenderer renderer = jTablaModificaciones.getCellRenderer(row, column);
                Component comp = jTablaModificaciones.prepareRenderer(renderer, row, column);
                int width = comp.getPreferredSize().width + jTablaModificaciones.getIntercellSpacing().width;
                preferredWidth = Math.max(preferredWidth, width);
            }

            tableColumn.setPreferredWidth(preferredWidth); // Establece el ancho preferido
        }

        // Activa el ajuste automático
        jTablaModificaciones.setAutoResizeMode(JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS);
        txtFieldBuscar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                buscar(txtFieldBuscar.getText()); // Llama a la función buscar con el texto ingresado
            }
            });
     }

    public SharedData getSharedData() {
        return shareData;
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTablaModificaciones = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        label3 = new java.awt.Label();
        jPanelRegresar = new javax.swing.JPanel();
        btnRegresar = new javax.swing.JButton();
        jLabelRegresar = new javax.swing.JLabel();
        txtFieldBuscar = new java.awt.TextField();
        btnAgregar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jTablaModificaciones.setBackground(new java.awt.Color(255, 255, 255));
        jTablaModificaciones.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jTablaModificaciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cliente", "Código Casa", "Fax", "Costo", "Modificaciones ", "Fecha Entrega"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTablaModificaciones.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTablaModificaciones);
        if (jTablaModificaciones.getColumnModel().getColumnCount() > 0) {
            jTablaModificaciones.getColumnModel().getColumn(0).setResizable(false);
            jTablaModificaciones.getColumnModel().getColumn(1).setResizable(false);
            jTablaModificaciones.getColumnModel().getColumn(1).setPreferredWidth(10);
            jTablaModificaciones.getColumnModel().getColumn(2).setResizable(false);
            jTablaModificaciones.getColumnModel().getColumn(3).setResizable(false);
            jTablaModificaciones.getColumnModel().getColumn(4).setResizable(false);
            jTablaModificaciones.getColumnModel().getColumn(5).setResizable(false);
        }

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 200, 1360, 260));

        jPanel4.setBackground(new java.awt.Color(0, 51, 102));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        label3.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        label3.setForeground(new java.awt.Color(255, 255, 255));
        label3.setText("MODIFICACIONES");
        jPanel4.add(label3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, -1, 20));

        jPanelRegresar.setBackground(new java.awt.Color(0, 51, 102));

        btnRegresar.setBackground(new java.awt.Color(0, 51, 102));
        btnRegresar.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        btnRegresar.setForeground(new java.awt.Color(255, 255, 255));
        btnRegresar.setText("Regresar");
        btnRegresar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnRegresarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnRegresarMouseExited(evt);
            }
        });
        btnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarActionPerformed(evt);
            }
        });

        jLabelRegresar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelRegresar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/back.png"))); // NOI18N

        javax.swing.GroupLayout jPanelRegresarLayout = new javax.swing.GroupLayout(jPanelRegresar);
        jPanelRegresar.setLayout(jPanelRegresarLayout);
        jPanelRegresarLayout.setHorizontalGroup(
            jPanelRegresarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelRegresarLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelRegresar)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnRegresar, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanelRegresarLayout.setVerticalGroup(
            jPanelRegresarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelRegresarLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnRegresar, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanelRegresarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelRegresar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.add(jPanelRegresar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 140, 60));

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 140, 460));

        txtFieldBuscar.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jPanel1.add(txtFieldBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(167, 126, 250, 23));

        btnAgregar.setBackground(new java.awt.Color(0, 51, 102));
        btnAgregar.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        btnAgregar.setForeground(new java.awt.Color(255, 255, 255));
        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });
        jPanel1.add(btnAgregar, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 40, 90, 31));

        btnModificar.setBackground(new java.awt.Color(0, 51, 102));
        btnModificar.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        btnModificar.setForeground(new java.awt.Color(255, 255, 255));
        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });
        jPanel1.add(btnModificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 80, 90, 32));

        btnEliminar.setBackground(new java.awt.Color(0, 51, 102));
        btnEliminar.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        btnEliminar.setForeground(new java.awt.Color(255, 255, 255));
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        jPanel1.add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 120, 90, 32));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private int getColumnIndex(String columnName) {
        return jTablaModificaciones.getColumnModel().getColumnIndex(columnName);
    }
    
    private void transparencia(JButton btn){
        btn.setOpaque(false);
        btn.setContentAreaFilled(false);
        btn.setBorderPainted(false);
    };
    
    private void desactivarCeldas(){
        for (int i = 0; i < modelo.getColumnCount(); i++) {
            Class<?> colClass = modelo.getColumnClass(i); //Toma el tipo de dato que tiene una columna, por eso el genérico
            this.jTablaModificaciones.setDefaultEditor(colClass, null); // Esto deshabilita la edición
        }
        jTablaModificaciones.getTableHeader().setReorderingAllowed(false); // Desactivar la reordenación de columnas
        jTablaModificaciones.getTableHeader().setResizingAllowed(false);
    };
     
    private void mostrarModificaciones(){   
        modelo.setRowCount(0);
        for(int i = 0; i < shareData.getCasas().size(); i++){
            if(shareData.getCasas().get(i).getNombreCliente().equals(cliente)){
                for(int k = 0; k < shareData.getCasas().get(i).getModificaciones().size(); k++){

                    String [] row = new String[6];
                    row[0] = shareData.getCasas().get(i).getModificaciones().get(k).getNombreModi();
                    row[1] = "<html><body style='width: 300px'>" + shareData.getCasas().get(i).getModificaciones().get(k).getDescrip();
                    row[2] = shareData.getCasas().get(i).getModificaciones().get(k).getEstado();
                    row[3] = String.valueOf(shareData.getCasas().get(i).getModificaciones().get(k).getFechaInicio());
                    row[4] = String.valueOf(shareData.getCasas().get(i).getModificaciones().get(k).getFechaFin());
                    row[5] = String.valueOf(shareData.getCasas().get(i).getModificaciones().get(k).getCostoAdicional());
                    modelo.addRow(row);
                    
                }
            }
        }
        ajustarTamanoColumnaDescripcion();
    } 
    private void ajustarTamanoColumnaDescripcion() {
        TableColumn columnaDescripcion = jTablaModificaciones.getColumnModel().getColumn(getColumnIndex("Descripción"));
        int ancho = 0;
        int alto = 1; // Altura mínima
        TableCellRenderer renderer = columnaDescripcion.getHeaderRenderer();

        for (int row = 0; row < jTablaModificaciones.getRowCount(); row++) {
            renderer = jTablaModificaciones.getCellRenderer(row, columnaDescripcion.getModelIndex());
            Component comp = renderer.getTableCellRendererComponent(jTablaModificaciones, jTablaModificaciones.getValueAt(row, columnaDescripcion.getModelIndex()), false, false, row, columnaDescripcion.getModelIndex());
            ancho = Math.max(comp.getPreferredSize().width, ancho);

            // Calcula la altura requerida para el contenido de la celda
            int rowHeight = comp.getPreferredSize().height;
            alto = Math.max(rowHeight, alto);
         }

        columnaDescripcion.setPreferredWidth(ancho + 10); // Agrega un pequeño espacio adicional.
        jTablaModificaciones.setRowHeight(alto);
    }
    
     private void calcularCostoModificaciones(){
        double costoModificaciones = 0;
        for(int i = 0; i < shareData.getCasas().size(); i++){
            if(shareData.getCasas().get(i).getNombreCliente().equals(cliente)){
                for(int k = 0; k < shareData.getCasas().get(i).getModificaciones().size(); k++){
                      costoModificaciones = costoModificaciones + shareData.getCasas().get(i).getModificaciones().get(k).getCostoAdicional();
                }
                shareData.getCasas().get(i).setCostoModificaciones(costoModificaciones);
            }
        }
       
    }
     private void buscar(String textoIngresado){
         boolean encontrado = false;
        List<Modificaciones> modificacionesEncontradas = new ArrayList<>();
        for(int i = 0; i < shareData.getCasas().size(); i++){
            if(shareData.getCasas().get(i).getNombreCliente() == cliente){
                 for(int k = 0; k < shareData.getCasas().get(i).getModificaciones().size(); k++){
                     if(textoIngresado.isEmpty()){
                         mostrarModificaciones();
                         return;
                     }else if(textoIngresado.equals(shareData.getCasas().get(i).getModificaciones().get(k).getNombreModi())|| textoIngresado.equals(shareData.getCasas().get(i).getModificaciones().get(k).getEstado()) || textoIngresado.equals(shareData.getCasas().get(i).getModificaciones().get(k).getFechaInicio()) || textoIngresado.equals(shareData.getCasas().get(i).getModificaciones().get(k).getFechaFin())){
                         modificacionesEncontradas.add(shareData.getCasas().get(i).getModificaciones().get(k));
                         encontrado = true;
                     }
                 }
                 }
            }
       
        

        if (encontrado) {
            modelo.setRowCount(0);
           for (Modificaciones modificacionEncontrada : modificacionesEncontradas) {
                String[] row = new String[6];
                // Obtener la información de modificacionEncontrada
                String nombreModi = modificacionEncontrada.getNombreModi();
                String descrip = "<html><body style='width: 300px'>" + modificacionEncontrada.getDescrip();
                String estado = modificacionEncontrada.getEstado();
                String fechaInicio = String.valueOf(modificacionEncontrada.getFechaInicio());
                String fechaFin = String.valueOf(modificacionEncontrada.getFechaFin());
                String costoAdicional = String.valueOf(modificacionEncontrada.getCostoAdicional());

                // Agregar la información a la fila
                row[0] = nombreModi;
                row[1] = descrip;
                row[2] = estado;
                row[3] = fechaInicio;
                row[4] = fechaFin;
                     row[5] = costoAdicional;

                // Asumiendo que "modelo" es el modelo de una tabla
                modelo.addRow(row);
            }
        } else {
            JOptionPane.showMessageDialog(null, "No se encontraron coincidencias", "Error", JOptionPane.ERROR_MESSAGE);
        }
     };
    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        // TODO add your handling code here:
        AgregarModificacion pagModi = new AgregarModificacion(getSharedData(), cliente);
        this.setVisible(false);
        pagModi.setVisible(true);
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnRegresarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRegresarMouseEntered
        Color colorRgb= new Color(0, 102, 204);
        jPanelRegresar.setBackground(colorRgb);
    }//GEN-LAST:event_btnRegresarMouseEntered

    private void btnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarActionPerformed
        // TODO add your handling code here:
        calcularCostoModificaciones();
        CasasLandingPage casasPage = new CasasLandingPage(getSharedData());
        this.setVisible(false);
        casasPage.setVisible(true);
        
    }//GEN-LAST:event_btnRegresarActionPerformed

    private void btnRegresarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRegresarMouseExited
        // TODO add your handling code here:
        Color colorRgb= new Color(0,51,102);
        jPanelRegresar.setBackground(colorRgb);
    }//GEN-LAST:event_btnRegresarMouseExited

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        int fila = jTablaModificaciones.getSelectedRow();
        System.out.println(fila);
        try{
            Object valor = jTablaModificaciones.getValueAt(fila,0);
            ModificarModificacion modiPage = new ModificarModificacion(getSharedData(), (String) valor); //Convierto valor a String
            modiPage.setVisible(true);
            this.setVisible(false);
            
        }catch(Exception e){
             JOptionPane.showMessageDialog(null, "Seleccione una fila para modificar", "Error",JOptionPane.ERROR_MESSAGE);
        };        
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        int fila = jTablaModificaciones.getSelectedRow();
        
        if(fila >= 0){
            modelo.removeRow(fila);
            for(int i = 0 ; i < shareData.getCasas().size();i++){
                if(shareData.getCasas().get(i).getNombreCliente().equals(cliente)){
                    shareData.getCasas().get(i).getModificaciones().remove(fila);
                }
            }
        }else{
            JOptionPane.showMessageDialog(null, "Seleccione una fila para eliminar", "Error",JOptionPane.ERROR_MESSAGE);
        };
    }//GEN-LAST:event_btnEliminarActionPerformed

   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnRegresar;
    private javax.swing.JLabel jLabelRegresar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanelRegresar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTablaModificaciones;
    private java.awt.Label label3;
    private java.awt.TextField txtFieldBuscar;
    // End of variables declaration//GEN-END:variables
}
